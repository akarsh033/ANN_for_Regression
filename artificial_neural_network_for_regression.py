# -*- coding: utf-8 -*-
"""Copy of Artificial Neural Network

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14KCGQdMo0-54Rh71sZU5Ti99AsEAT0Lm

# Artificial Neural Network

### Importing the libraries
"""

import numpy as np
import pandas as pd
import tensorflow as tf

tf.__version__

"""## Part 1 - Data Preprocessing

### Importing the dataset
"""

dataset=pd.read_excel('Folds5x2_pp.xlsx')
x=dataset.iloc[:,:-1]
y=dataset.iloc[:,-1]

"""### Splitting the dataset into the Training set and Test set"""

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=0)

"""## Part 2 - Building the ANN

### Initializing the ANN
"""

ann=tf.keras.Sequential()

"""### Adding the input layer and the first hidden layer"""

ann.add(tf.keras.layers.Dense(6,activation='relu'))

"""### Adding the second hidden layer"""

ann.add(tf.keras.layers.Dense(6))

"""### Adding the output layer"""

ann.add(tf.keras.layers.Dense(1))

"""## Part 3 - Training the ANN

### Compiling the ANN
"""

ann.compile(optimizer='adam',loss='mean_squared_error')

"""### Training the ANN model on the Training set"""

ann.fit(x=x_train,y=y_train,batch_size=32,epochs=249)

"""### Predicting the results of the Test set"""

def mda(actual: np.ndarray, predicted: np.ndarray):
    """ Mean Directional Accuracy """
    return np.mean((np.sign(actual[1:] - actual[:-1]) == np.sign(predicted[1:] - predicted[:-1])).astype(int))

y_pred=ann.predict(x_test)
np.set_printoptions(precision=2)
print(np.concatenate((y_pred.reshape(len(y_pred),1),y_test.values.reshape(len(y_test),1)),1))
mda(y_pred.reshape(len(y_pred),1),y_test.values.reshape(len(y_test),1))
#print(np.concatenate(y_test.values,y_pred))